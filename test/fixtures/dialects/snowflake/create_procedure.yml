# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: ec18bfe29fcc137f7822bd45b2888c4f3dff8ea379746498d0fd066ac6698016
file:
- statement:
    create_procedure_statement:
    - keyword: create
    - keyword: or
    - keyword: replace
    - keyword: procedure
    - function_name:
        function_name_identifier: sp_pi
    - function_parameter_list:
        bracketed:
          start_bracket: (
          end_bracket: )
    - keyword: returns
    - data_type:
        data_type_identifier: float
    - keyword: not
    - keyword: 'null'
    - keyword: language
    - keyword: javascript
    - keyword: as
    - test_dollar_quote:
      - raw_dollar_quote: $$
      - word: return
      - numeric_literal: '3.1415926'
      - semicolon: ;
      - raw_dollar_quote: $$
- statement_terminator: ;
- statement:
    create_procedure_statement:
    - keyword: create
    - keyword: or
    - keyword: replace
    - keyword: procedure
    - function_name:
        function_name_identifier: stproc1
    - function_parameter_list:
        bracketed:
          start_bracket: (
          parameter: FLOAT_PARAM1
          data_type:
            data_type_identifier: FLOAT
          end_bracket: )
    - keyword: returns
    - data_type:
        data_type_identifier: string
    - keyword: language
    - keyword: javascript
    - keyword: strict
    - keyword: execute
    - keyword: as
    - keyword: owner
    - keyword: as
    - test_dollar_quote:
      - raw_dollar_quote: $$
      - word: var
      - word: sql_command
      - equals: '='
      - double_quote: '"INSERT INTO stproc_test_table1 (num_col1) VALUES ("'
      - plus: +
      - word: FLOAT_PARAM1
      - plus: +
      - double_quote: '")"'
      - semicolon: ;
      - word: try
      - start_curly_bracket: '{'
      - word: snowflake
      - dot: .
      - word: execute
      - bracketed:
        - start_bracket: (
        - start_curly_bracket: '{'
        - word: sqlText
        - colon: ':'
        - word: sql_command
        - end_curly_bracket: '}'
        - end_bracket: )
      - semicolon: ;
      - word: return
      - double_quote: '"Succeeded."'
      - semicolon: ;
      - end_curly_bracket: '}'
      - word: catch
      - bracketed:
          start_bracket: (
          word: err
          end_bracket: )
      - start_curly_bracket: '{'
      - word: return
      - double_quote: '"Failed: "'
      - plus: +
      - word: err
      - semicolon: ;
      - end_curly_bracket: '}'
      - raw_dollar_quote: $$
- statement_terminator: ;
- statement:
    create_procedure_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: PROCEDURE
    - function_name:
        naked_identifier: public
        dot: .
        function_name_identifier: test_procedure
    - function_parameter_list:
        bracketed:
        - start_bracket: (
        - parameter: test_table
        - data_type:
            data_type_identifier: VARCHAR
            bracketed_arguments:
              bracketed:
                start_bracket: (
                end_bracket: )
        - comma: ','
        - parameter: test_col
        - data_type:
            data_type_identifier: VARCHAR
            bracketed_arguments:
              bracketed:
                start_bracket: (
                end_bracket: )
        - end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: VARCHAR
        bracketed_arguments:
          bracketed:
            start_bracket: (
            end_bracket: )
    - keyword: LANGUAGE
    - keyword: JAVASCRIPT
    - keyword: AS
    - test_dollar_quote:
      - raw_dollar_quote: $$
      - word: try
      - start_curly_bracket: '{'
      - word: var
      - word: sql_command
      - equals: '='
      - double_quote: '"ALTER TABLE "'
      - plus: +
      - word: test_table
      - plus: +
      - double_quote: '" DROP "'
      - plus: +
      - word: tet_col
      - semicolon: ;
      - word: snowflake
      - dot: .
      - word: execute
      - bracketed:
        - start_bracket: (
        - start_curly_bracket: '{'
        - word: sqlText
        - colon: ':'
        - word: sql_command
        - end_curly_bracket: '}'
        - end_bracket: )
      - semicolon: ;
      - word: return
      - double_quote: '"Succeeded."'
      - semicolon: ;
      - end_curly_bracket: '}'
      - word: catch
      - bracketed:
          start_bracket: (
          word: err
          end_bracket: )
      - start_curly_bracket: '{'
      - word: return
      - double_quote: '"Failed: execute "'
      - plus: +
      - word: sql_command
      - plus: +
      - double_quote: '". Error : "'
      - plus: +
      - word: err
      - semicolon: ;
      - end_curly_bracket: '}'
      - raw_dollar_quote: $$
- statement_terminator: ;
- statement:
    create_procedure_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: PROCEDURE
    - keyword: IF
    - keyword: NOT
    - keyword: EXISTS
    - function_name:
      - naked_identifier: UTIL_DB
      - dot: .
      - naked_identifier: PUBLIC
      - dot: .
      - function_name_identifier: PROCEDURE_IF_NOT_EXISTS
    - function_parameter_list:
        bracketed:
          start_bracket: (
          end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: INT
    - keyword: LANGUAGE
    - keyword: JAVASCRIPT
    - keyword: AS
    - test_dollar_quote:
      - raw_dollar_quote: $$
      - word: return
      - numeric_literal: '1'
      - semicolon: ;
      - raw_dollar_quote: $$
- statement_terminator: ;
- statement:
    create_procedure_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: PROCEDURE
    - function_name:
      - naked_identifier: UTIL_DB
      - dot: .
      - naked_identifier: PUBLIC
      - dot: .
      - function_name_identifier: PROCEDURE_WITHOUT_EXPLICIT_LANGUAGE
    - function_parameter_list:
        bracketed:
          start_bracket: (
          end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: INT
    - keyword: AS
    - test_dollar_quote:
      - raw_dollar_quote: $$
      - word: BEGIN
      - word: RETURN
      - numeric_literal: '1'
      - semicolon: ;
      - word: END
      - raw_dollar_quote: $$
- statement_terminator: ;
- statement:
    create_procedure_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: PROCEDURE
    - function_name:
      - naked_identifier: UTIL_DB
      - dot: .
      - naked_identifier: PUBLIC
      - dot: .
      - function_name_identifier: PROCEDURE_LANGUAGE_SQL
    - function_parameter_list:
        bracketed:
          start_bracket: (
          end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: INT
    - keyword: LANGUAGE
    - keyword: SQL
    - keyword: AS
    - raw_dollar_quote: $$
    - scripting_block_statement:
      - keyword: BEGIN
      - statement:
          return_statement:
            keyword: RETURN
            expression:
              numeric_literal: '1'
      - statement_terminator: ;
      - keyword: END
    - raw_dollar_quote: $$
- statement_terminator: ;
- statement:
    create_procedure_statement:
    - keyword: create
    - keyword: or
    - keyword: replace
    - keyword: procedure
    - function_name:
      - naked_identifier: UTIL_DB
      - dot: .
      - naked_identifier: PUBLIC
      - dot: .
      - function_name_identifier: PROCEDURE_LANGUAGE_PYTHON
    - function_parameter_list:
        bracketed:
          start_bracket: (
          end_bracket: )
    - keyword: returns
    - data_type:
        data_type_identifier: variant
    - keyword: language
    - keyword: python
    - keyword: runtime_version
    - comparison_operator:
        raw_comparison_operator: '='
    - quoted_literal: "'3.8'"
    - keyword: packages
    - comparison_operator:
        raw_comparison_operator: '='
    - bracketed:
      - start_bracket: (
      - quoted_literal: "'numpy'"
      - comma: ','
      - quoted_literal: "'pandas'"
      - comma: ','
      - quoted_literal: "'xgboost==1.5.0'"
      - end_bracket: )
    - keyword: handler
    - comparison_operator:
        raw_comparison_operator: '='
    - quoted_literal: "'udf'"
    - comment_equals_clause:
        keyword: comment
        comparison_operator:
          raw_comparison_operator: '='
        quoted_literal: "'hello_world'"
    - keyword: as
    - test_dollar_quote:
      - raw_dollar_quote: $$
      - word: import
      - word: numpy
      - word: as
      - word: np
      - word: import
      - word: pandas
      - word: as
      - word: pd
      - word: import
      - word: xgboost
      - word: as
      - word: xgb
      - word: def
      - word: udf
      - bracketed:
          start_bracket: (
          end_bracket: )
      - colon: ':'
      - word: return
      - start_square_bracket: '['
      - word: np
      - dot: .
      - word: __version__
      - comma: ','
      - word: pd
      - dot: .
      - word: __version__
      - comma: ','
      - word: xgb
      - dot: .
      - word: __version__
      - end_square_bracket: ']'
      - raw_dollar_quote: $$
- statement_terminator: ;
- statement:
    create_procedure_statement:
    - keyword: create
    - keyword: or
    - keyword: replace
    - keyword: procedure
    - function_name:
      - naked_identifier: UTIL_DB
      - dot: .
      - naked_identifier: PUBLIC
      - dot: .
      - function_name_identifier: PROCEDURE_LANGUAGE_JAVA
    - function_parameter_list:
        bracketed:
          start_bracket: (
          parameter: x
          data_type:
            data_type_identifier: varchar
          end_bracket: )
    - keyword: returns
    - data_type:
        data_type_identifier: varchar
    - keyword: language
    - keyword: java
    - keyword: called
    - keyword: 'on'
    - keyword: 'null'
    - keyword: input
    - keyword: handler
    - comparison_operator:
        raw_comparison_operator: '='
    - quoted_literal: "'TestFunc.echoVarchar'"
    - keyword: target_path
    - comparison_operator:
        raw_comparison_operator: '='
    - quoted_literal: "'@~/testfunc.jar'"
    - keyword: as
    - udf_body: "'class TestFunc {\n  public static String echoVarchar(String x) {\n\
        \    return x;\n  }\n}'"
- statement_terminator: ;
- statement:
    create_procedure_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: PROCEDURE
    - function_name:
        function_name_identifier: filter_by_role
    - function_parameter_list:
        bracketed:
        - start_bracket: (
        - parameter: table_name
        - data_type:
            data_type_identifier: VARCHAR
        - comma: ','
        - parameter: role
        - data_type:
            data_type_identifier: VARCHAR
        - end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: INT
    - keyword: LANGUAGE
    - keyword: SCALA
    - keyword: RUNTIME_VERSION
    - comparison_operator:
        raw_comparison_operator: '='
    - quoted_literal: "'2.12'"
    - keyword: PACKAGES
    - comparison_operator:
        raw_comparison_operator: '='
    - bracketed:
        start_bracket: (
        quoted_literal: "'com.snowflake:snowpark:latest'"
        end_bracket: )
    - keyword: HANDLER
    - comparison_operator:
        raw_comparison_operator: '='
    - quoted_literal: "'Filter.filterByRole'"
    - keyword: AS
    - test_dollar_quote:
      - raw_dollar_quote: $$
      - word: import
      - word: com
      - dot: .
      - word: snowflake
      - dot: .
      - word: snowpark
      - dot: .
      - word: functions
      - dot: .
      - word: _
      - word: import
      - word: com
      - dot: .
      - word: snowflake
      - dot: .
      - word: snowpark
      - dot: .
      - word: _
      - word: object
      - word: Filter
      - start_curly_bracket: '{'
      - word: def
      - word: filterByRole
      - bracketed:
        - start_bracket: (
        - word: session
        - colon: ':'
        - word: Session
        - comma: ','
        - word: tableName
        - colon: ':'
        - word: String
        - comma: ','
        - word: role
        - colon: ':'
        - word: String
        - end_bracket: )
      - colon: ':'
      - word: DataFrame
      - equals: '='
      - start_curly_bracket: '{'
      - word: val
      - word: table
      - equals: '='
      - word: session
      - dot: .
      - word: table
      - start_bracket: (
      - word: tableName
      - end_bracket: )
      - word: val
      - word: filteredRows
      - equals: '='
      - word: table
      - dot: .
      - word: filter
      - start_bracket: (
      - word: col
      - start_bracket: (
      - double_quote: '"role"'
      - end_bracket: )
      - equals: '='
      - equals: '='
      - equals: '='
      - word: role
      - end_bracket: )
      - word: return
      - word: filteredRows
      - end_curly_bracket: '}'
      - end_curly_bracket: '}'
      - raw_dollar_quote: $$
- statement_terminator: ;
- statement:
    create_procedure_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: PROCEDURE
    - function_name:
        function_name_identifier: myprocedure
    - function_parameter_list:
        bracketed:
          start_bracket: (
          parameter: '"Id"'
          data_type:
            data_type_identifier: NUMBER
            bracketed_arguments:
              bracketed:
              - start_bracket: (
              - numeric_literal: '38'
              - comma: ','
              - numeric_literal: '0'
              - end_bracket: )
          end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: VARCHAR
    - keyword: LANGUAGE
    - keyword: SQL
    - keyword: AS
    - raw_dollar_quote: $$
    - scripting_declare_statement:
      - keyword: DECLARE
      - variable: radius_of_circle
      - data_type:
          data_type_identifier: FLOAT
      - statement_terminator: ;
      - variable: area_of_circle
      - data_type:
          data_type_identifier: FLOAT
      - statement_terminator: ;
      - scripting_block_statement:
        - keyword: BEGIN
        - statement:
            scripting_let_statement:
              variable: radius_of_circle
              assignment_operator: :=
              expression:
                numeric_literal: '3'
        - statement_terminator: ;
        - statement:
            scripting_let_statement:
              variable: area_of_circle
              assignment_operator: :=
              expression:
              - function:
                  function_name:
                    function_name_identifier: pi
                  function_contents:
                    bracketed:
                      start_bracket: (
                      end_bracket: )
              - binary_operator: '*'
              - column_reference:
                  naked_identifier: radius_of_circle
              - binary_operator: '*'
              - column_reference:
                  naked_identifier: radius_of_circle
        - statement_terminator: ;
        - statement:
            return_statement:
              keyword: RETURN
              expression:
                column_reference:
                  naked_identifier: area_of_circle
        - statement_terminator: ;
        - keyword: END
    - statement_terminator: ;
    - raw_dollar_quote: $$
- statement_terminator: ;
- statement:
    create_procedure_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: PROCEDURE
    - function_name:
        function_name_identifier: MY_PROCEDURE
    - function_parameter_list:
        bracketed:
          start_bracket: (
          parameter: '"Id"'
          data_type:
            data_type_identifier: NUMBER
            bracketed_arguments:
              bracketed:
              - start_bracket: (
              - numeric_literal: '38'
              - comma: ','
              - numeric_literal: '0'
              - end_bracket: )
          end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: VARCHAR
    - keyword: LANGUAGE
    - keyword: SQL
    - keyword: AS
    - scripting_block_statement:
      - keyword: BEGIN
      - statement:
          select_statement:
            select_clause:
              keyword: select
              select_clause_element:
                numeric_literal: '1'
      - statement_terminator: ;
      - statement:
          select_statement:
            select_clause:
              keyword: select
              select_clause_element:
                numeric_literal: '2'
      - statement_terminator: ;
      - statement:
          select_statement:
            select_clause:
              keyword: select
              select_clause_element:
                numeric_literal: '3'
      - statement_terminator: ;
      - statement:
          select_statement:
            select_clause:
              keyword: select
              select_clause_element:
                numeric_literal: '4'
      - statement_terminator: ;
      - statement:
          return_statement:
            keyword: return
            expression:
              numeric_literal: '5'
      - statement_terminator: ;
      - keyword: END
- statement_terminator: ;
- statement:
    create_procedure_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: PROCEDURE
    - function_name:
        function_name_identifier: MY_PROCEDURE
    - function_parameter_list:
        bracketed:
          start_bracket: (
          parameter: hello_world
          data_type:
            data_type_identifier: VARCHAR
            bracketed_arguments:
              bracketed:
                start_bracket: (
                numeric_literal: '10000'
                end_bracket: )
          end_bracket: )
    - keyword: COPY
    - keyword: GRANTS
    - keyword: RETURNS
    - data_type:
        data_type_identifier: TABLE
        bracketed_arguments:
          bracketed:
            start_bracket: (
            end_bracket: )
    - keyword: LANGUAGE
    - keyword: PYTHON
    - keyword: RUNTIME_VERSION
    - comparison_operator:
        raw_comparison_operator: '='
    - quoted_literal: "'3.11'"
    - keyword: PACKAGES
    - comparison_operator:
        raw_comparison_operator: '='
    - bracketed:
        start_bracket: (
        quoted_literal: "'snowflake-snowpark-python'"
        end_bracket: )
    - keyword: HANDLER
    - comparison_operator:
        raw_comparison_operator: '='
    - quoted_literal: "'my.path.func_formula_parser_test_script_runner_proc'"
    - keyword: IMPORTS
    - comparison_operator:
        raw_comparison_operator: '='
    - bracketed:
        start_bracket: (
        quoted_literal: "'@MIRROR.PYTHON_SCRIPTS/script.py'"
        end_bracket: )
    - keyword: EXECUTE
    - keyword: AS
    - keyword: OWNER
- statement_terminator: ;
- statement:
    create_procedure_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: PROCEDURE
    - function_name:
        naked_identifier: DATA_STAGE
        dot: .
        function_name_identifier: INGEST_DATA_FROM_GS
    - function_parameter_list:
        bracketed:
        - start_bracket: (
        - parameter: P_GOOGLE_SPREADSHEET_ID
        - data_type:
            data_type_identifier: VARCHAR
            bracketed_arguments:
              bracketed:
                start_bracket: (
                numeric_literal: '16777216'
                end_bracket: )
        - comma: ','
        - parameter: P_SHEET_NAME
        - data_type:
            data_type_identifier: VARCHAR
            bracketed_arguments:
              bracketed:
                start_bracket: (
                numeric_literal: '16777216'
                end_bracket: )
        - comma: ','
        - parameter: P_STAGING_TABLE
        - data_type:
            data_type_identifier: VARCHAR
            bracketed_arguments:
              bracketed:
                start_bracket: (
                numeric_literal: '16777216'
                end_bracket: )
        - end_bracket: )
    - keyword: COPY
    - keyword: GRANTS
    - keyword: RETURNS
    - data_type:
        data_type_identifier: VARCHAR
        bracketed_arguments:
          bracketed:
            start_bracket: (
            numeric_literal: '16777216'
            end_bracket: )
    - keyword: LANGUAGE
    - keyword: PYTHON
    - keyword: RUNTIME_VERSION
    - comparison_operator:
        raw_comparison_operator: '='
    - quoted_literal: "'3.11'"
    - keyword: PACKAGES
    - comparison_operator:
        raw_comparison_operator: '='
    - bracketed:
      - start_bracket: (
      - quoted_literal: "'snowflake-snowpark-python'"
      - comma: ','
      - quoted_literal: "'requests'"
      - end_bracket: )
    - keyword: HANDLER
    - comparison_operator:
        raw_comparison_operator: '='
    - quoted_literal: "'SF_GOOGLE_SHEET_LOADER.ingest_gs_to_staging_table'"
    - keyword: IMPORTS
    - comparison_operator:
        raw_comparison_operator: '='
    - bracketed:
        start_bracket: (
        quoted_literal: "'@DATA_STAGE.PYTHON_SCRIPTS/SF_GOOGLE_SHEET_LOADER.py'"
        end_bracket: )
    - keyword: EXTERNAL_ACCESS_INTEGRATIONS
    - comparison_operator:
        raw_comparison_operator: '='
    - bracketed:
        start_bracket: (
        naked_identifier: GOOGLESHEET_APIS_ACCESS_INTEGRATION
        end_bracket: )
    - keyword: SECRETS
    - comparison_operator:
        raw_comparison_operator: '='
    - bracketed:
      - start_bracket: (
      - quoted_literal: "'cred'"
      - comparison_operator:
          raw_comparison_operator: '='
      - naked_identifier: DATA_STAGE
      - dot: .
      - naked_identifier: GS_OAUTH_TOKEN
      - comma: ','
      - quoted_literal: "'cred2'"
      - comparison_operator:
          raw_comparison_operator: '='
      - naked_identifier: my_cred
      - end_bracket: )
    - keyword: EXECUTE
    - keyword: AS
    - keyword: CALLER
- statement_terminator: ;

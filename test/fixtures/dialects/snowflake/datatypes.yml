# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 56a5c936085aedaff33d9a9dd3ee7e6a9a2a0ad1704ee7a4a45cd32f0b8c2142
file:
- statement:
    select_statement:
      select_clause:
      - keyword: select
      - select_clause_element:
          expression:
            cast_expression:
              column_reference:
                naked_identifier: blob
              semi_structured_expression:
                colon: ':'
                semi_structured_element: content
              casting_operator: '::'
              data_type:
                array_type:
                  keyword: array
                  array_type_schema:
                    bracketed:
                      start_bracket: (
                      data_type:
                        data_type_identifier: integer
                      end_bracket: )
          alias_expression:
            keyword: as
            naked_identifier: field1
      - comma: ','
      - select_clause_element:
          function:
            function_name:
              function_name_identifier: cast
            function_contents:
              bracketed:
                start_bracket: (
                expression:
                  column_reference:
                    naked_identifier: blob
                  semi_structured_expression:
                    colon: ':'
                    semi_structured_element: content
                keyword: as
                data_type:
                  array_type:
                    keyword: array
                    array_type_schema:
                      bracketed:
                        start_bracket: (
                        data_type:
                          data_type_identifier: integer
                        end_bracket: )
                end_bracket: )
          alias_expression:
            keyword: as
            naked_identifier: field2
      - comma: ','
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                naked_identifier: foo
- statement_terminator: ;
- statement:
    create_table_statement:
    - keyword: CREATE
    - keyword: TABLE
    - keyword: IF
    - keyword: NOT
    - keyword: EXISTS
    - table_reference:
        naked_identifier: table_name
    - bracketed:
      - start_bracket: (
      - column_definition:
          naked_identifier: col1
          data_type:
            array_type:
              keyword: ARRAY
              array_type_schema:
                bracketed:
                  start_bracket: (
                  data_type:
                    data_type_identifier: NUMBER
                  end_bracket: )
      - comma: ','
      - column_definition:
          naked_identifier: col2
          data_type:
            array_type:
              keyword: ARRAY
              array_type_schema:
                bracketed:
                - start_bracket: (
                - data_type:
                    data_type_identifier: NUMBER
                - keyword: NOT
                - keyword: 'NULL'
                - end_bracket: )
      - end_bracket: )
- statement_terminator: ;
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: FUNCTION
    - function_name:
        function_name_identifier: my_udtf
    - function_parameter_list:
        bracketed:
          start_bracket: (
          parameter: check
          data_type:
            data_type_identifier: BOOLEAN
          end_bracket: )
    - keyword: RETURNS
    - keyword: TABLE
    - bracketed:
        start_bracket: (
        column_definition:
          naked_identifier: col1
          data_type:
            array_type:
              keyword: ARRAY
              array_type_schema:
                bracketed:
                  start_bracket: (
                  data_type:
                    data_type_identifier: VARCHAR
                  end_bracket: )
        end_bracket: )
    - keyword: AS
    - test_dollar_quote:
      - raw_dollar_quote: $$
      - dot: .
      - dot: .
      - dot: .
      - raw_dollar_quote: $$
- statement_terminator: ;
- statement:
    create_procedure_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: PROCEDURE
    - function_name:
        function_name_identifier: my_procedure
    - function_parameter_list:
        bracketed:
          start_bracket: (
          parameter: values
          data_type:
            array_type:
              keyword: ARRAY
              array_type_schema:
                bracketed:
                  start_bracket: (
                  data_type:
                    data_type_identifier: INTEGER
                  end_bracket: )
          end_bracket: )
    - keyword: RETURNS
    - data_type:
        array_type:
          keyword: ARRAY
          array_type_schema:
            bracketed:
              start_bracket: (
              data_type:
                data_type_identifier: INTEGER
              end_bracket: )
    - keyword: LANGUAGE
    - keyword: SQL
    - keyword: AS
    - raw_dollar_quote: $$
    - scripting_block_statement:
      - keyword: BEGIN
      - statement:
          select_statement:
            select_clause:
              keyword: SELECT
              select_clause_element:
                wildcard_expression:
                  wildcard_identifier:
                    star: '*'
            from_clause:
              keyword: FROM
              from_expression:
                from_expression_element:
                  table_expression:
                    table_reference:
                      naked_identifier: my_table
      - statement_terminator: ;
      - keyword: END
    - statement_terminator: ;
    - raw_dollar_quote: $$
- statement_terminator: ;

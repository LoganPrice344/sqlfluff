# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: f734a1d30065a4cacef32a70e7dcb3d9a779754a19c8005a35f866ac477fe3ad
file:
- statement:
    execute_immediate_clause:
    - keyword: EXECUTE
    - keyword: IMMEDIATE
    - scripting_block_statement:
      - keyword: BEGIN
      - statement:
          scripting_let_statement:
            keyword: LET
            variable: somevariable
            assignment_operator: :=
            expression:
              numeric_literal: '5'
      - statement_terminator: ;
      - statement:
          scripting_let_statement:
            keyword: LET
            variable: somevariable
            data_type:
              data_type_identifier: NUMBER
              bracketed_arguments:
                bracketed:
                - start_bracket: (
                - numeric_literal: '38'
                - comma: ','
                - numeric_literal: '0'
                - end_bracket: )
            assignment_operator: :=
            expression:
              numeric_literal: '5'
      - statement_terminator: ;
      - statement:
          scripting_let_statement:
          - keyword: LET
          - variable: somevariable
          - data_type:
              data_type_identifier: NUMBER
              bracketed_arguments:
                bracketed:
                - start_bracket: (
                - numeric_literal: '38'
                - comma: ','
                - numeric_literal: '0'
                - end_bracket: )
          - keyword: DEFAULT
          - expression:
              numeric_literal: '5'
      - statement_terminator: ;
      - statement:
          scripting_let_statement:
          - keyword: LET
          - variable: somevariable
          - keyword: DEFAULT
          - expression:
              numeric_literal: '5'
      - statement_terminator: ;
      - statement:
          scripting_let_statement:
            variable: somevariable
            assignment_operator: :=
            expression:
              numeric_literal: '5'
      - statement_terminator: ;
      - statement:
          scripting_let_statement:
          - keyword: LET
          - variable: somevariable
          - keyword: cursor
          - keyword: FOR
          - select_statement:
              select_clause:
                keyword: SELECT
                select_clause_element:
                  column_reference:
                    naked_identifier: some_col
              from_clause:
                keyword: FROM
                from_expression:
                  from_expression_element:
                    table_expression:
                      table_reference:
                      - naked_identifier: some_database
                      - dot: .
                      - naked_identifier: schema
                      - dot: .
                      - naked_identifier: some_table
      - statement_terminator: ;
      - statement:
          scripting_let_statement:
          - keyword: LET
          - variable: somevariable
          - keyword: cursor
          - keyword: FOR
          - variable: somevariable
      - statement_terminator: ;
      - statement:
          scripting_let_statement:
            keyword: LET
            variable: someresult
            data_type:
              data_type_identifier: resultset
            assignment_operator: :=
            expression:
              bracketed:
                start_bracket: (
                expression:
                  select_statement:
                    select_clause:
                      keyword: SELECT
                      select_clause_element:
                        column_reference:
                          naked_identifier: some_col
                    from_clause:
                      keyword: FROM
                      from_expression:
                        from_expression_element:
                          table_expression:
                            table_reference:
                            - naked_identifier: some_database
                            - dot: .
                            - naked_identifier: schema
                            - dot: .
                            - naked_identifier: some_table
                end_bracket: )
      - statement_terminator: ;
      - statement:
          scripting_let_statement:
            variable: someresult
            assignment_operator: :=
            expression:
              bracketed:
                start_bracket: (
                expression:
                  select_statement:
                    select_clause:
                      keyword: SELECT
                      select_clause_element:
                        column_reference:
                          naked_identifier: SOME_COL
                    from_clause:
                      keyword: FROM
                      from_expression:
                        from_expression_element:
                          table_expression:
                            table_reference:
                            - naked_identifier: some_database
                            - dot: .
                            - naked_identifier: schema
                            - dot: .
                            - naked_identifier: some_table
                end_bracket: )
      - statement_terminator: ;
      - keyword: END
- statement_terminator: ;
- statement:
    scripting_let_statement:
      keyword: LET
      variable: VARIABLE
      assignment_operator: :=
      expression:
        column_reference:
          naked_identifier: SOME_VALUE
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
            bind_variable:
              colon: ':'
              variable: variable
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                naked_identifier: my_table
- statement_terminator: ;

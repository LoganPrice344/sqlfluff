# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 8f9de1f34769f07e2598fcce4c02bf5944c214d8eded2fe052998c91dd814029
file:
- statement:
    execute_immediate_clause:
    - keyword: EXECUTE
    - keyword: IMMEDIATE
    - scripting_declare_statement:
      - keyword: DECLARE
      - variable: profit
      - data_type:
          data_type_identifier: number
          bracketed_arguments:
            bracketed:
            - start_bracket: (
            - numeric_literal: '38'
            - comma: ','
            - numeric_literal: '2'
            - end_bracket: )
      - keyword: DEFAULT
      - expression:
          numeric_literal: '0.0'
      - statement_terminator: ;
      - variable: revenue
      - data_type:
          data_type_identifier: number
          bracketed_arguments:
            bracketed:
            - start_bracket: (
            - numeric_literal: '38'
            - comma: ','
            - numeric_literal: '2'
            - end_bracket: )
      - keyword: DEFAULT
      - expression:
          numeric_literal: '110.0'
      - statement_terminator: ;
      - variable: c1
      - keyword: CURSOR
      - keyword: FOR
      - select_statement:
          select_clause:
            keyword: SELECT
            select_clause_element:
              column_reference:
                naked_identifier: price
          from_clause:
            keyword: FROM
            from_expression:
              from_expression_element:
                table_expression:
                  table_reference:
                    naked_identifier: invoices
      - statement_terminator: ;
      - variable: myexception
      - data_type:
          data_type_identifier: EXCEPTION
          bracketed_arguments:
            bracketed:
              start_bracket: (
              numeric_literal:
                sign_indicator: '-'
                numeric_literal: '20000'
              comma: ','
              quoted_literal: "'my first exception'"
              end_bracket: )
      - statement_terminator: ;
      - scripting_block_statement:
        - keyword: BEGIN
        - statement:
            scripting_let_statement:
              variable: profit
              assignment_operator: :=
              expression:
                numeric_literal: '1.0'
        - statement_terminator: ;
        - keyword: END
- statement_terminator: ;
- statement:
    execute_immediate_clause:
    - keyword: EXECUTE
    - keyword: IMMEDIATE
    - scripting_declare_statement:
      - keyword: DECLARE
      - variable: res
      - data_type:
          data_type_identifier: RESULTSET
      - keyword: DEFAULT
      - expression:
          bracketed:
            start_bracket: (
            expression:
              select_statement:
                select_clause:
                  keyword: SELECT
                  select_clause_element:
                    column_reference:
                      naked_identifier: price
                from_clause:
                  keyword: FROM
                  from_expression:
                    from_expression_element:
                      table_expression:
                        table_reference:
                          naked_identifier: invoices
            end_bracket: )
      - statement_terminator: ;
      - variable: c1
      - keyword: CURSOR
      - keyword: FOR
      - variable: res
      - statement_terminator: ;
      - scripting_block_statement:
        - keyword: BEGIN
        - statement:
            return_statement:
              keyword: RETURN
              expression:
                column_reference:
                  naked_identifier: c1
        - statement_terminator: ;
        - keyword: END
- statement_terminator: ;
- statement:
    execute_immediate_clause:
    - keyword: EXECUTE
    - keyword: IMMEDIATE
    - scripting_declare_statement:
      - keyword: DECLARE
      - variable: profit
      - data_type:
          data_type_identifier: number
          bracketed_arguments:
            bracketed:
            - start_bracket: (
            - numeric_literal: '38'
            - comma: ','
            - numeric_literal: '2'
            - end_bracket: )
      - keyword: DEFAULT
      - expression:
          numeric_literal: '0.0'
      - statement_terminator: ;
      - scripting_block_statement:
        - keyword: BEGIN
        - statement:
            scripting_let_statement:
              variable: i
              assignment_operator: :=
              expression:
                numeric_literal: '1'
        - statement_terminator: ;
        - statement:
            scripting_let_statement:
              variable: j
              assignment_operator: :=
              expression:
                numeric_literal: '1'
        - statement_terminator: ;
        - statement:
            while_segment:
            - keyword: WHILE
            - bracketed:
                start_bracket: (
                expression:
                  column_reference:
                    naked_identifier: i
                  comparison_operator:
                  - raw_comparison_operator: <
                  - raw_comparison_operator: '='
                  numeric_literal: '4'
                end_bracket: )
            - keyword: DO
            - statement:
                while_segment:
                - keyword: WHILE
                - bracketed:
                    start_bracket: (
                    expression:
                      column_reference:
                        naked_identifier: j
                      comparison_operator:
                      - raw_comparison_operator: <
                      - raw_comparison_operator: '='
                      numeric_literal: '4'
                    end_bracket: )
                - keyword: DO
                - statement:
                    if_statement:
                    - keyword: IF
                    - bracketed:
                        start_bracket: (
                        expression:
                          column_reference:
                            naked_identifier: j
                          comparison_operator:
                            raw_comparison_operator: '='
                          numeric_literal: '3'
                        end_bracket: )
                    - keyword: THEN
                    - break_segment:
                        keyword: BREAK
                        object_reference:
                          naked_identifier: outer_loop
                    - statement_terminator: ;
                    - keyword: END
                    - keyword: IF
                - statement_terminator: ;
                - statement:
                    scripting_let_statement:
                      variable: j
                      assignment_operator: :=
                      expression:
                        column_reference:
                          naked_identifier: j
                        binary_operator: +
                        numeric_literal: '1'
                - statement_terminator: ;
                - keyword: END
                - keyword: WHILE
                - table_reference:
                    naked_identifier: inner_loop
            - statement_terminator: ;
            - statement:
                scripting_let_statement:
                  variable: i
                  assignment_operator: :=
                  expression:
                    column_reference:
                      naked_identifier: i
                    binary_operator: +
                    numeric_literal: '1'
            - statement_terminator: ;
            - keyword: END
            - keyword: WHILE
            - table_reference:
                naked_identifier: outer_loop
        - statement_terminator: ;
        - statement:
            return_statement:
              keyword: RETURN
              expression:
                column_reference:
                  naked_identifier: i
        - statement_terminator: ;
        - keyword: END
- statement_terminator: ;
- statement:
    scripting_declare_statement:
      keyword: DECLARE
      variable: res
      data_type:
        data_type_identifier: RESULTSET
      statement_terminator: ;
      scripting_block_statement:
      - keyword: BEGIN
      - statement:
          select_statement:
            select_clause:
              keyword: SELECT
              select_clause_element:
                wildcard_expression:
                  wildcard_identifier:
                    star: '*'
            from_clause:
              keyword: FROM
              from_expression:
                from_expression_element:
                  table_expression:
                    table_reference:
                      naked_identifier: my_table
      - statement_terminator: ;
      - keyword: END
- statement_terminator: ;
- statement:
    scripting_declare_statement:
      keyword: DECLARE
      variable: res
      parameter: RESULTSET
      data_type:
        data_type_identifier: DEFAULT
      statement_terminator: ;
      scripting_block_statement:
      - keyword: BEGIN
      - statement:
          select_statement:
            select_clause:
              keyword: SELECT
              select_clause_element:
                wildcard_expression:
                  wildcard_identifier:
                    star: '*'
            from_clause:
              keyword: FROM
              from_expression:
                from_expression_element:
                  table_expression:
                    table_reference:
                      naked_identifier: my_table
      - statement_terminator: ;
      - keyword: END
- statement_terminator: ;
- statement:
    scripting_declare_statement:
    - keyword: DECLARE
    - variable: res
    - data_type:
        data_type_identifier: RESULTSET
    - keyword: DEFAULT
    - expression:
        function:
          function_name:
            function_name_identifier: ASYNC
          function_contents:
            bracketed:
              start_bracket: (
              expression:
                select_statement:
                  select_clause:
                    keyword: SELECT
                    select_clause_element:
                      column_reference:
                        naked_identifier: a
                  from_clause:
                    keyword: FROM
                    from_expression:
                      from_expression_element:
                        table_expression:
                          table_reference:
                            naked_identifier: t001
                  orderby_clause:
                  - keyword: ORDER
                  - keyword: BY
                  - column_reference:
                      naked_identifier: a
              end_bracket: )
    - statement_terminator: ;
    - scripting_block_statement:
      - keyword: BEGIN
      - statement:
          select_statement:
            select_clause:
              keyword: SELECT
              select_clause_element:
                wildcard_expression:
                  wildcard_identifier:
                    star: '*'
            from_clause:
              keyword: FROM
              from_expression:
                from_expression_element:
                  table_expression:
                    table_reference:
                      naked_identifier: my_table
      - statement_terminator: ;
      - keyword: END
- statement_terminator: ;
- statement:
    scripting_declare_statement:
      keyword: DECLARE
      variable: res
      data_type:
        data_type_identifier: RESULTSET
      assignment_operator: :=
      expression:
        bracketed:
          start_bracket: (
          expression:
            select_statement:
              select_clause:
                keyword: SELECT
                select_clause_element:
                  column_reference:
                    naked_identifier: a
              from_clause:
                keyword: FROM
                from_expression:
                  from_expression_element:
                    table_expression:
                      table_reference:
                        naked_identifier: t001
              orderby_clause:
              - keyword: ORDER
              - keyword: BY
              - column_reference:
                  naked_identifier: a
          end_bracket: )
      statement_terminator: ;
      scripting_block_statement:
      - keyword: BEGIN
      - statement:
          select_statement:
            select_clause:
              keyword: SELECT
              select_clause_element:
                wildcard_expression:
                  wildcard_identifier:
                    star: '*'
            from_clause:
              keyword: FROM
              from_expression:
                from_expression_element:
                  table_expression:
                    table_reference:
                      naked_identifier: my_table
      - statement_terminator: ;
      - keyword: END
- statement_terminator: ;
- statement:
    scripting_declare_statement:
      keyword: DECLARE
      variable: res
      data_type:
        data_type_identifier: RESULTSET
      assignment_operator: :=
      expression:
        function:
          function_name:
            function_name_identifier: ASYNC
          function_contents:
            bracketed:
              start_bracket: (
              expression:
                select_statement:
                  select_clause:
                    keyword: SELECT
                    select_clause_element:
                      column_reference:
                        naked_identifier: a
                  from_clause:
                    keyword: FROM
                    from_expression:
                      from_expression_element:
                        table_expression:
                          table_reference:
                            naked_identifier: t001
                  orderby_clause:
                  - keyword: ORDER
                  - keyword: BY
                  - column_reference:
                      naked_identifier: a
              end_bracket: )
      statement_terminator: ;
      scripting_block_statement:
      - keyword: BEGIN
      - statement:
          select_statement:
            select_clause:
              keyword: SELECT
              select_clause_element:
                wildcard_expression:
                  wildcard_identifier:
                    star: '*'
            from_clause:
              keyword: FROM
              from_expression:
                from_expression_element:
                  table_expression:
                    table_reference:
                      naked_identifier: my_table
      - statement_terminator: ;
      - keyword: END
- statement_terminator: ;

# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: cda42a42981f5dfee411e043ef503c2cf25c1932a0bad3e7ff6050371ee7855b
file:
- statement:
    create_view_statement:
    - keyword: create
    - keyword: view
    - table_reference:
        naked_identifier: another_view
    - comment_equals_clause:
        keyword: comment
        comparison_operator:
          raw_comparison_operator: '='
        quoted_literal: "'a great description'"
    - keyword: as
    - select_statement:
        select_clause:
        - keyword: select
        - select_clause_element:
            column_reference:
              naked_identifier: col_1
        - comma: ','
        - select_clause_element:
            column_reference:
              naked_identifier: col_2
        from_clause:
          keyword: from
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  naked_identifier: other_table
- statement_terminator: ;
- statement:
    create_view_statement:
    - keyword: CREATE
    - keyword: VIEW
    - table_reference:
        naked_identifier: basic_view
    - keyword: AS
    - select_statement:
        select_clause:
        - keyword: SELECT
        - select_clause_element:
            column_reference:
              naked_identifier: col1
        - comma: ','
        - select_clause_element:
            column_reference:
              naked_identifier: col2
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  naked_identifier: src_table
- statement_terminator: ;
- statement:
    create_view_statement:
    - keyword: CREATE
    - keyword: TEMPORARY
    - keyword: VIEW
    - table_reference:
        naked_identifier: view_with_comments
    - comment_equals_clause:
        keyword: COMMENT
        comparison_operator:
          raw_comparison_operator: '='
        quoted_literal: "'my comment'"
    - keyword: AS
    - select_statement:
        select_clause:
        - keyword: SELECT
        - select_clause_element:
            column_reference:
              naked_identifier: col1
        - comma: ','
        - select_clause_element:
            column_reference:
              naked_identifier: col2
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  naked_identifier: src_table
- statement_terminator: ;
- statement:
    create_view_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: VIEW
    - table_reference:
        naked_identifier: view_with_replace_and_comment
    - comment_equals_clause:
        keyword: COMMENT
        comparison_operator:
          raw_comparison_operator: '='
        quoted_literal: "'my comment'"
    - keyword: AS
    - select_statement:
        select_clause:
        - keyword: SELECT
        - select_clause_element:
            column_reference:
              naked_identifier: col1
        - comma: ','
        - select_clause_element:
            column_reference:
              naked_identifier: col2
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  naked_identifier: src_table
- statement_terminator: ;
- statement:
    create_view_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: SECURE
    - keyword: RECURSIVE
    - keyword: VIEW
    - keyword: IF
    - keyword: NOT
    - keyword: EXISTS
    - table_reference:
        naked_identifier: secure_recursive_view_with_comment
    - comment_equals_clause:
        keyword: COMMENT
        comparison_operator:
          raw_comparison_operator: '='
        quoted_literal: "'my comment'"
    - keyword: AS
    - select_statement:
        select_clause:
        - keyword: SELECT
        - select_clause_element:
            column_reference:
              naked_identifier: col1
        - comma: ','
        - select_clause_element:
            column_reference:
              naked_identifier: col2
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  naked_identifier: src_table
- statement_terminator: ;
- statement:
    create_view_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: VIEW
    - table_reference:
        naked_identifier: view_with_comment_and_copy_grants
    - comment_equals_clause:
        keyword: COMMENT
        comparison_operator:
          raw_comparison_operator: '='
        quoted_literal: "'my comment'"
    - keyword: COPY
    - keyword: GRANTS
    - keyword: AS
    - select_statement:
        select_clause:
        - keyword: SELECT
        - select_clause_element:
            column_reference:
              naked_identifier: col1
        - comma: ','
        - select_clause_element:
            column_reference:
              naked_identifier: col2
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  naked_identifier: src_table
- statement_terminator: ;
- statement:
    create_view_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: VIEW
    - table_reference:
        naked_identifier: view_with_tags_and_copy_grants
    - tag_bracketed_equals:
      - keyword: WITH
      - keyword: TAG
      - bracketed:
        - start_bracket: (
        - tag_reference:
            naked_identifier: foo
        - comparison_operator:
            raw_comparison_operator: '='
        - quoted_literal: "'bar'"
        - comma: ','
        - tag_reference:
            naked_identifier: hello
        - comparison_operator:
            raw_comparison_operator: '='
        - quoted_literal: "'world'"
        - end_bracket: )
    - keyword: COPY
    - keyword: GRANTS
    - keyword: AS
    - select_statement:
        select_clause:
        - keyword: SELECT
        - select_clause_element:
            column_reference:
              naked_identifier: col1
        - comma: ','
        - select_clause_element:
            column_reference:
              naked_identifier: col2
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  naked_identifier: src_table
- statement_terminator: ;
- statement:
    create_view_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: VIEW
    - table_reference:
        naked_identifier: view_with_tags_and_copy_grants
    - tag_bracketed_equals:
      - keyword: WITH
      - keyword: TAG
      - bracketed:
        - start_bracket: (
        - tag_reference:
            naked_identifier: foo
        - comparison_operator:
            raw_comparison_operator: '='
        - quoted_literal: '"bar"'
        - comma: ','
        - tag_reference:
            naked_identifier: hello
        - comparison_operator:
            raw_comparison_operator: '='
        - quoted_literal: '"world"'
        - end_bracket: )
    - keyword: COPY
    - keyword: GRANTS
    - keyword: AS
    - select_statement:
        select_clause:
        - keyword: SELECT
        - select_clause_element:
            column_reference:
              naked_identifier: col1
        - comma: ','
        - select_clause_element:
            column_reference:
              naked_identifier: col2
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  naked_identifier: src_table
- statement_terminator: ;
- statement:
    create_view_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: VIEW
    - table_reference:
        naked_identifier: view_with_column_comment
    - bracketed:
      - start_bracket: (
      - column_reference:
          naked_identifier: col1
      - comma: ','
      - column_reference:
          naked_identifier: col2
      - comment_clause:
          keyword: COMMENT
          quoted_literal: "'some comment'"
      - end_bracket: )
    - keyword: AS
    - select_statement:
        select_clause:
        - keyword: SELECT
        - select_clause_element:
            column_reference:
              naked_identifier: col1
        - comma: ','
        - select_clause_element:
            column_reference:
              naked_identifier: col2
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  naked_identifier: src_table
- statement_terminator: ;
- statement:
    create_view_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: SECURE
    - keyword: RECURSIVE
    - keyword: VIEW
    - keyword: IF
    - keyword: NOT
    - keyword: EXISTS
    - table_reference:
        naked_identifier: view_with_all_implemented_features
    - comment_equals_clause:
        keyword: COMMENT
        comparison_operator:
          raw_comparison_operator: '='
        quoted_literal: "'table-level comment'"
    - bracketed:
      - start_bracket: (
      - column_reference:
          naked_identifier: col1
      - comma: ','
      - column_reference:
          naked_identifier: col2
      - comment_clause:
          keyword: COMMENT
          quoted_literal: "'some comment'"
      - end_bracket: )
    - keyword: AS
    - with_compound_statement:
        keyword: WITH
        common_table_expression:
          naked_identifier: cte
          keyword: AS
          bracketed:
            start_bracket: (
            select_statement:
              select_clause:
                keyword: SELECT
                select_clause_element:
                  column_reference:
                    naked_identifier: col1
              from_clause:
                keyword: FROM
                from_expression:
                  from_expression_element:
                    table_expression:
                      table_reference:
                        naked_identifier: table_1
            end_bracket: )
        select_statement:
          select_clause:
          - keyword: SELECT
          - select_clause_element:
              column_reference:
                naked_identifier: col1
          - comma: ','
          - select_clause_element:
              column_reference:
                naked_identifier: col2
          from_clause:
            keyword: FROM
            from_expression:
              from_expression_element:
                table_expression:
                  table_reference:
                    naked_identifier: table_2
              join_clause:
              - keyword: INNER
              - keyword: JOIN
              - from_expression_element:
                  table_expression:
                    table_reference:
                      naked_identifier: my_cte
              - join_on_condition:
                  keyword: 'ON'
                  expression:
                  - column_reference:
                    - naked_identifier: table_1
                    - dot: .
                    - naked_identifier: pk
                  - comparison_operator:
                      raw_comparison_operator: '='
                  - column_reference:
                    - naked_identifier: table_2
                    - dot: .
                    - naked_identifier: pk
- statement_terminator: ;
- statement:
    create_view_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: VIEW
    - table_reference:
        naked_identifier: vw_appt_latest
    - keyword: AS
    - bracketed:
        start_bracket: (
        with_compound_statement:
          keyword: WITH
          common_table_expression:
            naked_identifier: most_current
            keyword: as
            bracketed:
              start_bracket: (
              select_statement:
                select_clause:
                  keyword: SELECT
                  select_clause_element:
                    wildcard_expression:
                      wildcard_identifier:
                        naked_identifier: da
                        dot: .
                        star: '*'
                from_clause:
                  keyword: FROM
                  from_expression:
                    from_expression_element:
                      table_expression:
                        table_reference:
                          naked_identifier: dim_appt
                      alias_expression:
                        naked_identifier: da
                where_clause:
                  keyword: WHERE
                  expression:
                    column_reference:
                    - naked_identifier: da
                    - dot: .
                    - naked_identifier: current_appt_id
                    keyword: IS
                    null_literal: 'NULL'
              end_bracket: )
          select_statement:
            select_clause:
              keyword: SELECT
              select_clause_element:
                wildcard_expression:
                  wildcard_identifier:
                    star: '*'
            from_clause:
              keyword: from
              from_expression:
                from_expression_element:
                  table_expression:
                    table_reference:
                      naked_identifier: most_current
        end_bracket: )
- statement_terminator: ;
- statement:
    create_view_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: VIEW
    - keyword: IF
    - keyword: NOT
    - keyword: EXISTS
    - table_reference:
        naked_identifier: view_with_rls
    - bracketed:
      - start_bracket: (
      - column_reference:
          naked_identifier: COL1
      - comma: ','
      - column_reference:
          naked_identifier: COL2
      - end_bracket: )
    - keyword: WITH
    - keyword: ROW
    - keyword: ACCESS
    - keyword: POLICY
    - object_reference:
      - naked_identifier: my_db
      - dot: .
      - naked_identifier: my_schema
      - dot: .
      - naked_identifier: my_policy
    - keyword: 'ON'
    - bracketed:
        start_bracket: (
        column_reference:
          naked_identifier: COL1
        end_bracket: )
    - keyword: AS
    - bracketed:
        start_bracket: (
        select_statement:
          select_clause:
          - keyword: SELECT
          - select_clause_element:
              column_reference:
                naked_identifier: COL1
          - comma: ','
          - select_clause_element:
              column_reference:
                naked_identifier: COL2
          from_clause:
            keyword: FROM
            from_expression:
              from_expression_element:
                table_expression:
                  table_reference:
                    naked_identifier: my_table
        end_bracket: )
- statement_terminator: ;
- statement:
    create_view_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: VIEW
    - keyword: IF
    - keyword: NOT
    - keyword: EXISTS
    - table_reference:
        naked_identifier: view_with_rls
    - bracketed:
      - start_bracket: (
      - column_reference:
          naked_identifier: COL1
      - keyword: WITH
      - keyword: MASKING
      - keyword: POLICY
      - function_name:
        - naked_identifier: my_db
        - dot: .
        - naked_identifier: my_schema
        - dot: .
        - function_name_identifier: my_policy
      - comma: ','
      - column_reference:
          naked_identifier: COL2
      - end_bracket: )
    - keyword: WITH
    - keyword: ROW
    - keyword: ACCESS
    - keyword: POLICY
    - object_reference:
      - naked_identifier: my_db
      - dot: .
      - naked_identifier: my_schema
      - dot: .
      - naked_identifier: my_policy
    - keyword: 'ON'
    - bracketed:
        start_bracket: (
        column_reference:
          naked_identifier: COL1
        end_bracket: )
    - keyword: AS
    - bracketed:
        start_bracket: (
        select_statement:
          select_clause:
          - keyword: SELECT
          - select_clause_element:
              column_reference:
                naked_identifier: COL1
          - comma: ','
          - select_clause_element:
              column_reference:
                naked_identifier: COL2
          from_clause:
            keyword: FROM
            from_expression:
              from_expression_element:
                table_expression:
                  table_reference:
                    naked_identifier: my_table
        end_bracket: )
- statement_terminator: ;
- statement:
    create_view_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: MATERIALIZED
    - keyword: VIEW
    - keyword: IF
    - keyword: NOT
    - keyword: EXISTS
    - table_reference:
        naked_identifier: view_with_rls
    - bracketed:
      - start_bracket: (
      - column_reference:
          naked_identifier: COL1
      - comma: ','
      - column_reference:
          naked_identifier: COL2
      - end_bracket: )
    - keyword: WITH
    - keyword: ROW
    - keyword: ACCESS
    - keyword: POLICY
    - object_reference:
      - naked_identifier: my_db
      - dot: .
      - naked_identifier: my_schema
      - dot: .
      - naked_identifier: my_policy
    - keyword: 'ON'
    - bracketed:
        start_bracket: (
        column_reference:
          naked_identifier: COL1
        end_bracket: )
    - keyword: AS
    - bracketed:
        start_bracket: (
        select_statement:
          select_clause:
          - keyword: SELECT
          - select_clause_element:
              column_reference:
                naked_identifier: COL1
          - comma: ','
          - select_clause_element:
              column_reference:
                naked_identifier: COL2
          from_clause:
            keyword: FROM
            from_expression:
              from_expression_element:
                table_expression:
                  table_reference:
                    naked_identifier: my_table
        end_bracket: )
- statement_terminator: ;
- statement:
    create_view_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: VIEW
    - keyword: IF
    - keyword: NOT
    - keyword: EXISTS
    - table_reference:
        naked_identifier: view_with_column_tags
    - bracketed:
      - start_bracket: (
      - column_reference:
          naked_identifier: COL1
      - tag_bracketed_equals:
        - keyword: WITH
        - keyword: TAG
        - bracketed:
            start_bracket: (
            tag_reference:
            - naked_identifier: my_db
            - dot: .
            - naked_identifier: my_schema
            - dot: .
            - naked_identifier: my_policy
            comparison_operator:
              raw_comparison_operator: '='
            quoted_literal: "'MY_TAG'"
            end_bracket: )
      - comma: ','
      - column_reference:
          naked_identifier: COL2
      - end_bracket: )
    - keyword: AS
    - bracketed:
        start_bracket: (
        select_statement:
          select_clause:
          - keyword: SELECT
          - select_clause_element:
              column_reference:
                naked_identifier: COL1
          - comma: ','
          - select_clause_element:
              column_reference:
                naked_identifier: COL2
          from_clause:
            keyword: FROM
            from_expression:
              from_expression_element:
                table_expression:
                  table_reference:
                    naked_identifier: my_table
        end_bracket: )
- statement_terminator: ;
- statement:
    create_view_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: ALTER
    - keyword: VIEW
    - table_reference:
        naked_identifier: view_with_column_comment
    - bracketed:
        start_bracket: (
        column_reference:
          naked_identifier: col1
        end_bracket: )
    - keyword: AS
    - select_statement:
        select_clause:
          keyword: SELECT
          select_clause_element:
            column_reference:
              naked_identifier: col1
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  naked_identifier: src_table
- statement_terminator: ;
- statement:
    scripting_block_statement:
    - keyword: BEGIN
    - statement:
        select_statement:
          select_clause:
            keyword: SELECT
            select_clause_element:
              wildcard_expression:
                wildcard_identifier:
                  star: '*'
          from_clause:
            keyword: FROM
            from_expression:
              from_expression_element:
                table_expression:
                  table_reference:
                    naked_identifier: mytable
    - statement_terminator: ;
    - keyword: END
- statement_terminator: ;
- statement:
    create_procedure_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: PROCEDURE
    - function_name:
      - naked_identifier: _ENT_INTEGRATION
      - dot: .
      - naked_identifier: CORE
      - dot: .
      - function_name_identifier: CORE_RECRUITING_CANDIDATE_PROFILE_EXTENSION_LOAD
    - function_parameter_list:
        bracketed:
          start_bracket: (
          end_bracket: )
    - keyword: RETURNS
    - data_type:
        data_type_identifier: VARCHAR
    - keyword: LANGUAGE
    - keyword: SQL
    - keyword: EXECUTE
    - keyword: AS
    - keyword: CALLER
    - keyword: AS
    - scripting_block_statement:
      - keyword: BEGIN
      - statement:
          create_table_statement:
          - keyword: CREATE
          - keyword: OR
          - keyword: REPLACE
          - keyword: TEMPORARY
          - keyword: TABLE
          - table_reference:
            - naked_identifier: _ENT_INTEGRATION
            - dot: .
            - naked_identifier: CORE
            - dot: .
            - naked_identifier: CORE_RECRUITING_CANDIDATE_PROFILE_EXTENSION_TEMP
          - keyword: AS
          - select_statement:
              select_clause:
              - keyword: SELECT
              - select_clause_element:
                  column_reference:
                    naked_identifier: SourceID
                  alias_expression:
                    keyword: as
                    naked_identifier: DWH_SOURCE_ID
              - comma: ','
              - select_clause_element:
                  column_reference:
                    naked_identifier: CANDIDATEID
                  alias_expression:
                    keyword: as
                    naked_identifier: CANDIDATE_ID
              - comma: ','
              - select_clause_element:
                  column_reference:
                    naked_identifier: CREATEDBY
                  alias_expression:
                    keyword: as
                    naked_identifier: CREATED_BY_NAME
              - comma: ','
              - select_clause_element:
                  function:
                    function_name:
                      function_name_identifier: TO_TIMESTAMP_TZ
                    function_contents:
                      bracketed:
                        start_bracket: (
                        expression:
                          column_reference:
                            naked_identifier: CREATEDDATETIME
                        end_bracket: )
                  alias_expression:
                    keyword: as
                    naked_identifier: CREATED_TIMESTAMP
              - comma: ','
              - select_clause_element:
                  column_reference:
                    naked_identifier: LASTMODIFIEDBY
                  alias_expression:
                    keyword: as
                    naked_identifier: LAST_MODIFIED_BY_NAME
              - comma: ','
              - select_clause_element:
                  function:
                    function_name:
                      function_name_identifier: TO_TIMESTAMP_TZ
                    function_contents:
                      bracketed:
                        start_bracket: (
                        expression:
                          column_reference:
                            naked_identifier: LASTMODIFIEDDATETIME
                        end_bracket: )
                  alias_expression:
                    keyword: as
                    naked_identifier: LAST_MODIFIED_TIMESTAMP
              - comma: ','
              - select_clause_element:
                  column_reference:
                    naked_identifier: MDFSYSTEMRECORDSTATUS
                  alias_expression:
                    keyword: as
                    naked_identifier: MODIFIED_SYSTEM_RECORD_STATUS_TEXT
              - comma: ','
              - select_clause_element:
                  column_reference:
                    naked_identifier: METADATA$ACTION
              from_clause:
                keyword: FROM
                from_expression:
                  from_expression_element:
                    table_expression:
                      bracketed:
                        start_bracket: (
                        select_statement:
                          select_clause:
                          - keyword: SELECT
                          - select_clause_element:
                              quoted_literal: "'SF'"
                              alias_expression:
                                keyword: AS
                                naked_identifier: SourceID
                          - comma: ','
                          - select_clause_element:
                              wildcard_expression:
                                wildcard_identifier:
                                  star: '*'
                          from_clause:
                            keyword: FROM
                            from_expression:
                              from_expression_element:
                                table_expression:
                                  table_reference:
                                  - naked_identifier: _ENT_LANDING
                                  - dot: .
                                  - naked_identifier: SF
                                  - dot: .
                                  - naked_identifier: CANDIDATEPROFILEEXTENSION_CUR_VW_STREAM
                        end_bracket: )
                    alias_expression:
                      naked_identifier: Z
      - statement_terminator: ;
      - statement:
          return_statement:
            keyword: return
            expression:
              quoted_literal: "'Success'"
      - statement_terminator: ;
      - keyword: END
- statement_terminator: ;
